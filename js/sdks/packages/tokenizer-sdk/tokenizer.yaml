openapi: 3.0.3
info:
  title: Tokenizer API
  description: The Tokenizer API used for tokenizing and detokenizing data and other endpoints
  version: 0.0.0
#servers:
#  - url: "http://localhost:3001"
#    variables:
#      tokenizerBackend:
#        default: "http://localhost:3001"
#        description: The endpoint for the tokenizer backend
paths:
  /tokenize:
    post:
      summary: Submit metadata about a token that was uploaded to s3
      operationId: tokenize
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenizeRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenizerResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /detokenize:
    post:
      summary: Get an S3 signed download URL for a token
      operationId: detokenize
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetokenizeRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetokenizeResponse'
        '500':
          description: An Error Occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '404':
          description: Unable to locate token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /grant/set:
    post:
      summary: Create a grant for a token, of type store or read
      operationId: setGrant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetGrantRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetGrantResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An Error Occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /grant/verify:
    post:
      summary: Get an S3 signed download URL for a token
      operationId: verifyGrant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyGrantRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyGrantResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An Error Occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /metadata/get:
    post:
      summary: Get an S3 signed download URL for a token
      operationId: getMetaData
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetMetadataRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMetadataResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An Error Occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Unable to locate token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
        error:
          type: string
      required:
        - success
        - error

    SetGrantRequest:
      type: object
      properties:
        sessionId:
          type: string
        tokenId:
          type: string
        grantType:
          "$ref": "#/components/schemas/GrantType"
      required:
        - sessionId
        - tokenId
        - grantType
      additionalProperties: false
    GrantType:
      type: string
      enum:
        - read_token
        - store_token
    VerifyGrantRequest:
      type: object
      properties:
        sessionId:
          type: string
        tokenId:
          type: string
        grantType:
          "$ref": "#/components/schemas/GrantType"
      required:
        - sessionId
        - tokenId
        - grantType
      additionalProperties: false

    GetMetadataRequest:
      type: object
      properties:
        tokenId:
          type: string
          description: Needs to be a UUID.
      required:
        - tokenId
      additionalProperties: false

    MetaData:
      oneOf:
        - "$ref": "#/components/schemas/StringMeta"
        - "$ref": "#/components/schemas/FileMeta"
      discriminator:
        propertyName: dataType
        mapping:
          file: "#/components/schemas/FileMeta" # holy cow is this clunky
          string: "#/components/schemas/StringMeta"

    StringMeta:
      type: object
      properties:
        customFields:
          type: object
        dataType:
          type: string
      required:
        - dataType
      additionalProperties: false

    BaseMeta:
      type: object
      properties:
        customFields:
          type: object
      additionalProperties: false

    FileMeta:
      type: object
      properties:
        customFields:
          type: object
        dataType:
          type: string
        createdAt:
          type: number
        fileinfo:
          type: object
          properties:
            filename:
              type: string
            type:
              type: string
            lastModified:
              type: number
          required:
            - filename
          additionalProperties: false
      required:
        - dataType
        - fileinfo
      additionalProperties: false

    DetokenizeRequest:
      type: object
      properties:
        tokenId:
          type: string
          description: Needs to be a UUID.
      required:
        - tokenId
      additionalProperties: false

    TokenizeRequest:
      type: object
      properties:
        metadata:
          "$ref": "#/components/schemas/MetaData"
      required:
        - metadata
      additionalProperties: false

    SetGrantResponse:
      type: object
      additionalProperties: false
      required:
        - success
        - data
      properties:
        success:
          type: boolean
        data:
          type: object
          additionalProperties: false



    VerifyGrantResponse:
      type: object
      additionalProperties: false
      required:
        - success
        - data
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            valid:
              type: boolean
          required:
              - valid
          additionalProperties: false

    GetMetadataResponse:
      type: object
      additionalProperties: false
      required:
        - success
        - data
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            metadata:
              "$ref": "#/components/schemas/MetaData"
          required:
            - metadata
          additionalProperties: false

    DetokenizeResponse:
      type: object
      required:
        - success
        - data
      additionalProperties: false
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            downloadUrl:
              type: string
            headers:
              type: object
          required:
            - downloadUrl
            - headers
          additionalProperties: false

    TokenizerResponse:
      type: object
      required:
        - success
        - data
      additionalProperties: false
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            tokenId:
              type: string
            uploadUrl:
              type: string
            headers:
              type: object
          required:
            - tokenId
            - uploadUrl
            - headers
          additionalProperties: false
