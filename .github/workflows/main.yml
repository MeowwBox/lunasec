# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # prevents extra Cypress installation progress messages
      CI: 1
      # avoid warnings like "tput: No value for $TERM and no -T specified"
      TERM: xterm

    steps:
    - uses: actions/checkout@v2

    - uses: browser-actions/setup-chrome@latest

    - run: npm install typescript cypress
    - run: cypress cache path
    - run: cypress cache list
    - name: Cache Cypress
      id: cache-cypress
      uses: actions/cache@v1
      with:
        path: ~/.cache/Cypress
        key: cypress-cache-v2-${{ runner.os }}-${{ hashFiles('**/package.json') }}

    # Pull the latest image to build, and avoid caching pull-only images.
    # (docker pull is faster than caching in most cases.)
    - run: docker-compose pull

    # In this step, this action saves a list of existing images,
    # the cache is created without them in the post run.
    # It also restores the cache if it exists.
    - uses: satackey/action-docker-layer-caching@v0.0.11
      # Ignore the failure of a step and avoid terminating the job.
      continue-on-error: true

    - name: Build the stack
      run: COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 docker-compose up -d

    - run: cypress install
    - run: cypress cache list
    - name: Cypress Run
      run: cypress run --headless --browser chrome
      working-directory: js/demo-apps/packages/react-front-end

    # Finally, "Post Run satackey/action-docker-layer-caching@v0.0.11",
    # which is the process of saving the cache, will be executed.
