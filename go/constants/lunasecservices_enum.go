// Copyright 2021 by LunaSec (owned by Refinery Labs, Inc)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package constants

import (
	"fmt"
	"strings"

	"gopkg.in/yaml.v3"
)

const (
	// LunaSecServicesTokenizerBackend is a LunaSecServices of type Tokenizer-Backend.
	LunaSecServicesTokenizerBackend LunaSecServices = iota
	// LunaSecServicesSecureFrameFrontend is a LunaSecServices of type Secure-Frame-Frontend.
	LunaSecServicesSecureFrameFrontend
)

const _LunaSecServicesName = "tokenizer-backendsecure-frame-frontend"

var _LunaSecServicesNames = []string{
	_LunaSecServicesName[0:17],
	_LunaSecServicesName[17:38],
}

// LunaSecServicesNames returns a list of possible string values of LunaSecServices.
func LunaSecServicesNames() []string {
	tmp := make([]string, len(_LunaSecServicesNames))
	copy(tmp, _LunaSecServicesNames)
	return tmp
}

var _LunaSecServicesMap = map[LunaSecServices]string{
	0: _LunaSecServicesName[0:17],
	1: _LunaSecServicesName[17:38],
}

// String implements the Stringer interface.
func (x LunaSecServices) String() string {
	if str, ok := _LunaSecServicesMap[x]; ok {
		return str
	}
	return fmt.Sprintf("LunaSecServices(%d)", x)
}

var _LunaSecServicesValue = map[string]LunaSecServices{
	_LunaSecServicesName[0:17]:                   0,
	strings.ToLower(_LunaSecServicesName[0:17]):  0,
	_LunaSecServicesName[17:38]:                  1,
	strings.ToLower(_LunaSecServicesName[17:38]): 1,
}

// ParseLunaSecServices attempts to convert a string to a LunaSecServices
func ParseLunaSecServices(name string) (LunaSecServices, error) {
	if x, ok := _LunaSecServicesValue[name]; ok {
		return x, nil
	}
	return LunaSecServices(0), fmt.Errorf("%s is not a valid LunaSecServices, try [%s]", name, strings.Join(_LunaSecServicesNames, ", "))
}

// MarshalText implements the text marshaller method
func (x LunaSecServices) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *LunaSecServices) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseLunaSecServices(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

func (x LunaSecServices) MarshalYAML() (interface{}, error) {
	string_output := x.String()

	_, err := ParseLunaSecServices(string_output)

	if err != nil {
		panic(err)
	}

	return string_output, nil
}

func (x *LunaSecServices) UnmarshalYAML(value *yaml.Node) error {
	return x.UnmarshalText([]byte(value.Value))
}
