// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package constants

import (
	"fmt"
	"strings"

	"gopkg.in/yaml.v3"
)

const (
	// MetricsProviderNone is a MetricsProvider of type None.
	MetricsProviderNone MetricsProvider = iota
	// MetricsProviderAwsCloudwatch is a MetricsProvider of type Aws_cloudwatch.
	MetricsProviderAwsCloudwatch
)

const _MetricsProviderName = "noneaws_cloudwatch"

var _MetricsProviderNames = []string{
	_MetricsProviderName[0:4],
	_MetricsProviderName[4:18],
}

// MetricsProviderNames returns a list of possible string values of MetricsProvider.
func MetricsProviderNames() []string {
	tmp := make([]string, len(_MetricsProviderNames))
	copy(tmp, _MetricsProviderNames)
	return tmp
}

var _MetricsProviderMap = map[MetricsProvider]string{
	0: _MetricsProviderName[0:4],
	1: _MetricsProviderName[4:18],
}

// String implements the Stringer interface.
func (x MetricsProvider) String() string {
	if str, ok := _MetricsProviderMap[x]; ok {
		return str
	}
	return fmt.Sprintf("MetricsProvider(%d)", x)
}

var _MetricsProviderValue = map[string]MetricsProvider{
	_MetricsProviderName[0:4]:                   0,
	strings.ToLower(_MetricsProviderName[0:4]):  0,
	_MetricsProviderName[4:18]:                  1,
	strings.ToLower(_MetricsProviderName[4:18]): 1,
}

// ParseMetricsProvider attempts to convert a string to a MetricsProvider
func ParseMetricsProvider(name string) (MetricsProvider, error) {
	if x, ok := _MetricsProviderValue[name]; ok {
		return x, nil
	}
	return MetricsProvider(0), fmt.Errorf("%s is not a valid MetricsProvider, try [%s]", name, strings.Join(_MetricsProviderNames, ", "))
}

// MarshalText implements the text marshaller method
func (x MetricsProvider) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *MetricsProvider) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseMetricsProvider(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

func (x MetricsProvider) MarshalYAML() (interface{}, error) {
	string_output := x.String()

	_, err := ParseMetricsProvider(string_output)

	if err != nil {
		panic(err)
	}

	return string_output, nil
}

func (x *MetricsProvider) UnmarshalYAML(value *yaml.Node) error {
	return x.UnmarshalText([]byte(value.Value))
}
