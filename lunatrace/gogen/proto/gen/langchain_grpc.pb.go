// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: langchain.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LangChain_CleanAdvisory_FullMethodName = "/langchain.LangChain/CleanAdvisory"
	LangChain_Chat_FullMethodName          = "/langchain.LangChain/Chat"
	LangChain_CleanSnippets_FullMethodName = "/langchain.LangChain/CleanSnippets"
)

// LangChainClient is the client API for LangChain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LangChainClient interface {
	// rpc Summarize(SummarizeRequest) returns (SummarizeResponse);
	CleanAdvisory(ctx context.Context, in *CleanAdvisoryRequest, opts ...grpc.CallOption) (*CleanAdvisoryResponse, error)
	Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error)
	CleanSnippets(ctx context.Context, in *CleanSnippetsRequest, opts ...grpc.CallOption) (*CleanSnippetsResponse, error)
}

type langChainClient struct {
	cc grpc.ClientConnInterface
}

func NewLangChainClient(cc grpc.ClientConnInterface) LangChainClient {
	return &langChainClient{cc}
}

func (c *langChainClient) CleanAdvisory(ctx context.Context, in *CleanAdvisoryRequest, opts ...grpc.CallOption) (*CleanAdvisoryResponse, error) {
	out := new(CleanAdvisoryResponse)
	err := c.cc.Invoke(ctx, LangChain_CleanAdvisory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langChainClient) Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, LangChain_Chat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langChainClient) CleanSnippets(ctx context.Context, in *CleanSnippetsRequest, opts ...grpc.CallOption) (*CleanSnippetsResponse, error) {
	out := new(CleanSnippetsResponse)
	err := c.cc.Invoke(ctx, LangChain_CleanSnippets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LangChainServer is the server API for LangChain service.
// All implementations must embed UnimplementedLangChainServer
// for forward compatibility
type LangChainServer interface {
	// rpc Summarize(SummarizeRequest) returns (SummarizeResponse);
	CleanAdvisory(context.Context, *CleanAdvisoryRequest) (*CleanAdvisoryResponse, error)
	Chat(context.Context, *ChatRequest) (*ChatResponse, error)
	CleanSnippets(context.Context, *CleanSnippetsRequest) (*CleanSnippetsResponse, error)
	mustEmbedUnimplementedLangChainServer()
}

// UnimplementedLangChainServer must be embedded to have forward compatible implementations.
type UnimplementedLangChainServer struct {
}

func (UnimplementedLangChainServer) CleanAdvisory(context.Context, *CleanAdvisoryRequest) (*CleanAdvisoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanAdvisory not implemented")
}
func (UnimplementedLangChainServer) Chat(context.Context, *ChatRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedLangChainServer) CleanSnippets(context.Context, *CleanSnippetsRequest) (*CleanSnippetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanSnippets not implemented")
}
func (UnimplementedLangChainServer) mustEmbedUnimplementedLangChainServer() {}

// UnsafeLangChainServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LangChainServer will
// result in compilation errors.
type UnsafeLangChainServer interface {
	mustEmbedUnimplementedLangChainServer()
}

func RegisterLangChainServer(s grpc.ServiceRegistrar, srv LangChainServer) {
	s.RegisterService(&LangChain_ServiceDesc, srv)
}

func _LangChain_CleanAdvisory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanAdvisoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LangChainServer).CleanAdvisory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LangChain_CleanAdvisory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LangChainServer).CleanAdvisory(ctx, req.(*CleanAdvisoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LangChain_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LangChainServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LangChain_Chat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LangChainServer).Chat(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LangChain_CleanSnippets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanSnippetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LangChainServer).CleanSnippets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LangChain_CleanSnippets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LangChainServer).CleanSnippets(ctx, req.(*CleanSnippetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LangChain_ServiceDesc is the grpc.ServiceDesc for LangChain service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LangChain_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "langchain.LangChain",
	HandlerType: (*LangChainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CleanAdvisory",
			Handler:    _LangChain_CleanAdvisory_Handler,
		},
		{
			MethodName: "Chat",
			Handler:    _LangChain_Chat_Handler,
		},
		{
			MethodName: "CleanSnippets",
			Handler:    _LangChain_CleanSnippets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "langchain.proto",
}
